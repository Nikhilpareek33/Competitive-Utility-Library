// not checked properly
// 0-based indexing is used
// 1-based for tree
// https://leetcode.com/problems/range-sum-query-immutable/
class seg_tree {

public:
    vll tree;
    ll n;

    seg_tree(ll n = 0)
    {
        this->tree.resize(4 * n + 1);
        this->n = n;
    }

    void build(ll in , ll l , ll r, vll &a)
    {
        // one element
        if (l == r)
        {
            this->tree[in] = a[l];
            return;
        }

        ll mid = (r - l) / 2 + l;

        build(2 * in , l, mid , a);
        build(2 * in + 1, mid + 1 , r , a);

        // do req operations
        tree[in] = tree[2 * in] + tree[2 * in + 1];

        return;
    }

    ll get_sum(ll l , ll r, ll in, ll ql , ll qr)
    {
        // not in this node
        if (ql > qr) return 0LL;

        // lies in the interval
        if (ql == l && qr == r)
        {
            // pr2(in,tree[in]);
            return this->tree[in];
        }

        ll mid = (r - l) / 2 + l;

        ll ans = get_sum(l , mid,  2 * in , ql, min(mid , qr))
                 + get_sum(mid + 1, r, 2 * in + 1 , max(mid + 1, ql) , qr );

        return ans;

    }

    void update(int l , int r, int in, int val, int index)
    {
        if (index < l || index > r) return;

        int mid = (r - l) / 2 + l;

        // update the value of the position
        if (l == r )
        {
            if (l == index)
                this->tree[in] = val;

            return;
        }

        update(l , mid , 2 * in , val , index);
        update(mid + 1, r, 2 * in + 1 , val , index);

        tree[in] = tree[2 * in] + tree[2 * in + 1];

    }


};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void build(vll &segtree,ll tl,ll tr,ll cn,vll a)
{
//      cout<<"entered"<<endl;
        if(tl==tr)
        {
                segtree[cn]=a[tl];
                return;
        }
        ll m= tl+(tr-tl)/2;
       
        build(segtree,tl,m,2*cn,a);
        build(segtree,m+1,tr,2*cn+1,a);
       
        segtree[cn]=segtree[2*cn]+segtree[2*cn+1];
//      cout<<cn<<" "<<segtree[cn]<<endl;
}
 
ll sum(ll cp,vll &segtree,ll tl,ll tr,ll l,ll r)
{
        if(l>r)
        {
                return 0;
        }
        if(tl==l&&tr==r)
        {
                return segtree[cp];
        }
       
        ll m=tl+(tr-tl)/2;
       
        return sum(2*cp,segtree,tl,m,l,min(r,m)) +
        sum(2*cp+1,segtree,m+1,tr,max(m+1,l),r);
}
 
void update(ll cp,vll &segtree ,ll tl,ll tr,ll pos,ll k)
{
        if(tl==tr)
        {
                segtree[cp]=k;
                return;
        }
       
        ll m=tl+(tr-tl)/2;
       
        if(pos<=m)
        {
                update(2*cp,segtree,tl,m,pos,k);
        }
       
        else
        {
                update(2*cp+1,segtree,m+1,tr,pos,k);
        }
        segtree[cp]=segtree[2*cp]+segtree[2*cp+1];
}
