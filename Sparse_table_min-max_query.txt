// sparse table implementation
// 1 for min and 2 for max operations respectively.

const int N=2e5+1;
const int k=17; // for upto 10^7 k = 25 is sufficient
ll sparse1[N+1][k],sparse2[N+1][k];
 
void fun1(vll &a,ll n)
{
	fr(i,n)
	{
		sparse1[i][0]=a[i];
		
	}
 
	fr1(j,17)
	{
		for(ll i=0;i+(1<<j)<=n;i++)
		{
			sparse1[i][j]=min(sparse1[i][j-1],sparse1[i+(1<<(j-1))][j-1]); // [i,i+2j-1-1]  and [i+2j-1,i+2j-1]
 
		}
 
	}
	
}
 
void fun2(vll &a,ll n)
{
	fr(i,n)
	{
		sparse2[i][0]=a[i];
		
	}
 
	fr1(j,17)
	{
		for(ll i=0;i+(1<<j)<=n;i++)
		{
			sparse2[i][j]=max(sparse2[i][j-1],sparse2[i+(1<<(j-1))][j-1]); // [i,i+2j-1-1]  and [i+2j-1,i+2j-1]
 
		}
 
	}
	
}
 
ll ans1(ll l,ll r)
{
	ll temp=floor(log2(r-l+1)); // alt (int)log2(r-l+1);
 
	return min(sparse1[l][temp],sparse1[r-(1<<temp)+1][temp]);
}
 
ll ans2(ll l,ll r)
{
	ll temp=floor(log2(r-l+1)); // alt (int)log2(r-l+1);
 
	return max(sparse2[l][temp],sparse2[r-(1<<temp)+1][temp]);
}
