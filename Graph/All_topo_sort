////////////////////////////////////////////////////////////////////////// USING INDEGREE //////////////////////////////////////
vll g[27];
vll present(27);

void init()
{
	fr(i,27)
	{
		g[i].clear();
	}
	
	
	fr(i,27) present[i]=0;
	
}


void solve(vll in,vll out,string ans,vll vis)
{
	bool done = false;
	
	fr(i,26)
	{
		// present and indegree 0;
		if(!vis[i] && present[i] && in[i]==0)
		{
			for(auto u:g[i])
			{
				// remove edges
				in[u]--;
			}
			
			char ch = (char)('a'+i);
			ans+=ch;
			vis[i]=1;
			
			solve(in,out,ans,vis);
			
			// backtrack
			
			vis[i]=0;
			ans.resize(ans.size()-1);
			
			for(auto u:g[i])
			{
				in[u]++;
			}
			
			done =1;
		}
	}
	
	if(!done)
	{
		cout<<ans<<endl;
	}
	
}



int main()
{
//	#ifndef LOCAL
//		freopen("input.txt","r",stdin);
//	#endif
  	
    fastio
	
	string line;
	stringstream s;
	
	s.clear();
	ll t=0;
	while(getline(cin,line))
	{
		
		if(t>0) cout<<endl;
		t++;
		init();
		s.clear();
		
		s << line;
		
		vector<char> a;
		char ch;
		
		while(s >> ch)
		{
			a.pb(ch);	
			present[ch-'a']=1;
			
		}
		
		s.clear();
		
		getline(cin,line);
		
		s << line;
		
		
		vll in(27,0),out(27,0);
		char c1,c2;
		while(s >> c1 >>c2)
		{
			ll f,s;
			
			f = c1-'a';
			
			s=c2-'a';
			
			g[f].pb(s);
			out[f]++;
			in[s]++;
//			cout<<c1 <<" > "<<c2<<endl;
		}
		
		vll vis(27,0);
		
		string ans;
		
//		fr(i,27)
//		{
//			sort(all(g[i]));
//		}
		solve(in,out,ans,vis);
		
//		cout<<endl;
	}
    
//    int t;
//    cin>>t;
//    
//    fr1(i,t)
//    {
//    	
////        cout<<"Case #"<<i<<": ";
//		solve();
//    }
 
   
    return 0;
}
//////////////////////////////////////////////////////////// END ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////// TESTED ON -11504 - Dominos  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const int N = 1e5+1;

ll n,m;

vll g[N];
vb vis(N);

vll in(N,0),dfs_num(N,-1),topo;
ll dfs_counter=0,ans=0;;

map<string,ll> pr;
map<ll,string> rev;


void init()
{
	dfs_counter =0;
	rev.clear();
	pr.clear();
	topo.clear();
	
	fr(i,N)
	{
		in[i]=0;
		dfs_num[i] = -1;
		g[i].clear();
		vis[i]=0;
	}
}

// Normal DFS
void dfs(ll cur)
{
	vis[cur]=1;
	
	for(auto u:g[cur])
	{
		if(!vis[u])
		{
			dfs(u);
		}
	}
	
}

// Similar for Topo sort but works for NON DAG using simple DFS /////// START ///////////////////////////
void dfs2(ll cur)
{
	vis[cur] =1;
	
	for(auto u:g[cur])
	{
		if(!vis[u])
		{
			dfs2(u);
		}
	}
	
	topo.pb(cur);
	
}

void solve()
{	
	init();
	
	cin>>n >> m;
	
	fr(i,m)
	{
		ll u,v;
		cin>>u>>v;
		
		g[u].pb(v);
		
	}
	
//	fr1(i,n) pr2(i,in[i]);
//	
//	cout<<endl;
	
	fr1(i,n)
	{
		if(!vis[i])
		{
			dfs2(i);
		}
	}
	
	reverse(all(topo));
	
	fr(i,N) vis[i]=0;
	
	ans=0;
	
	fr(i,n)
	{
		ll v= topo[i];
		
		if(!vis[v])
		{
			ans++;
			dfs(v);
		}
	}
	
	cout<<ans<<endl;
}

///////////////////////////////// END /////////////////////////////////////////
