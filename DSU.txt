// implement DSU  and union by size

// make set

void make_set(ll v,vll &p,vll &size)
{
	p[v]=v;
	size[v]=1;
}

// find
ll find_set(ll v,vll &p)
{
	if(p[v]==v)
	{
		return v;
	}
	
	return p[v]=find_set(p[v],p);
}

// union
void union_set(ll a,ll b,vll &p,vll &size)
{
	a=find_set(a,p);
	b=find_set(b,p);
	
	if(a!=b)
	{
		if(size[a]<size[b])
		{
			swap(a,b);
		}
		
		p[b]=a;
		size[a]+=size[b];
	}
}


/////////////////////////////////////////////// class DSU tourist's template /////////////////////

class dsu {
 public:
  vector<int> p;
  int n;
 
  dsu(int _n) : n(_n) {
    p.resize(n);
    iota(p.begin(), p.end(), 0);
  }
 
  inline int get(int x) {
    return (x == p[x] ? x : (p[x] = get(p[x])));
  }
 
  inline bool unite(int x, int y) {
    x = get(x);
    y = get(y);
    if (x != y) {
      p[x] = y;
      return true;
    }
    return false;
  }
};
 
 // use as ** data_type and function call as var.union
